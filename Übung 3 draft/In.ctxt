#BlueJ class context
comment0.target=In
comment0.text=\ Simple\ input\ from\ the\ keyboard\ or\ from\ a\ file.\r\n<p>Copyright\ (c)\ 2005\ Hanspeter\ Moessenboeck,\ University\ of\ Linz</p>\r\n\r\n<p>This\ class\ is\ free\ software;\ you\ can\ redistribute\ it\ and/or\ modify\ it\r\nunder\ the\ terms\ of\ the\ GNU\ General\ Public\ License\ as\ published\ by\ the\r\nFree\ Software\ Foundation;\ either\ version\ 2,\ or\ (at\ your\ option)\ any\r\nlater\ version.</p>\r\n\r\n<p>This\ class\ is\ distributed\ in\ the\ hope\ that\ it\ will\ be\ useful,\ but\r\nWITHOUT\ ANY\ WARRANTY;\ without\ even\ the\ implied\ warranty\ of\ MERCHANTABILITY\r\nor\ FITNESS\ FOR\ A\ PARTICULAR\ PURPOSE.\ \ See\ the\ <a\ href\="http\://www.gnu.org/copyleft/gpl.html">\r\nGNU\ General\ Public\ License</a>\ for\ more\ details.</p>\r\n<hr>\r\n\r\n<p>This\ class\ allows\ reading\ formatted\ data\ either\ from\ the\ keyboard\r\nor\ from\ a\ file.\ It\ is\ intended\ to\ be\ used\ in\ an\ introductory\r\nprogramming\ course\ when\ classes,\ packages\ and\ exceptions\ are\ unknown\r\nat\ the\ beginning.\ To\ use\ it,\ simply\ copy\ In.class\ into\ the\r\nsource\ file\ directory.\ </p>\r\n\r\n<p>All\ input\ comes\ from\ the\ current\ input\ file,\ which\ is\ initially\r\nthe\ keyboard.\ Opening\ a\ file\ with\ open()\ makes\ it\ the\ new\ current\r\ninput\ file.\ Closing\ a\ file\ with\ close()\ switches\ back\ to\ the\ previous\r\ninput\ file.</p>\r\n\r\n<p>When\ reading\ from\ the\ keyboard,\ reading\ blocks\ until\ the\ user\ has\ entered\r\na\ sequence\ of\ characters\ terminated\ by\ the\ return\ key.\ All\ methods\ read\r\nfrom\ this\ input\ buffer\ (including\ the\ terminating\ '\\r'\ and\ '\\n')\ until\ the\r\nbuffer\ is\ fully\ consumed.\ When\ a\ method\ tries\ to\ read\ beyond\ the\ end\r\nof\ the\ buffer,\ it\ blocks\ again\ waiting\ for\ the\ next\ buffer.</p>\r\n\r\n<p>End\ of\ file\ detection\:\ When\ reading\ from\ the\ keyboard,\ eof\ can\ be\r\nsignaled\ as\ ctrl-Z\ at\ the\ beginning\ of\ a\ new\ line.\ When\ reading\ from\ a\ file,\r\neof\ occurs\ when\ an\ attempt\ is\ made\ to\ read\ beyond\ the\ end\ of\ the\ file.\r\nIn\ either\ case\ In.done()\ returns\ false\ if\ the\ requested\ data\ could\ not\r\nbe\ read\ because\ of\ eof.\ </p>\r\n
comment1.params=
comment1.target=char\ charAfterWhiteSpace()
comment10.params=
comment10.target=java.lang.String\ readLine()
comment10.text=\ Read\ a\ line\ of\ text.\r\nThis\ method\ reads\ the\ rest\ of\ the\ current\ line\ (including\ eol)\ and\r\nreturns\ it\ (excluding\ eol).\ A\ line\ may\ be\ empty.\r\n
comment11.params=
comment11.target=java.lang.String\ readFile()
comment11.text=\ Read\ the\ whole\ file.\r\nThis\ method\ reads\ from\ the\ current\ position\ to\ the\ end\ of\ the\r\nfile\ and\ returns\ its\ text\ in\ a\ single\ large\ string.\ done()\ yields\r\nalways\ true.\r\n
comment12.params=
comment12.target=java.lang.String\ readString()
comment12.text=\ Read\ a\ quote-delimited\ string.\r\nThis\ method\ skips\ white\ space\ and\ tries\ to\ read\ a\ string\ in\ the\ form\ "...".\r\nIt\ can\ be\ used\ to\ read\ pieces\ of\ text\ that\ contain\ white\ space.\r\n
comment13.params=
comment13.target=int\ readInt()
comment13.text=\ Read\ an\ integer.\r\nThis\ method\ skips\ white\ space\ and\ tries\ to\ read\ an\ integer.\ If\ the\r\ntext\ does\ not\ contain\ an\ integer\ or\ if\ the\ number\ is\ too\ big,\ the\r\nvalue\ 0\ is\ returned\ and\ the\ subsequent\ call\ of\ done()\ yields\ false.\r\nAn\ integer\ is\ a\ sequence\ of\ digits,\ possibly\ preceded\ by\ '-'.\r\n
comment14.params=
comment14.target=long\ readLong()
comment14.text=\ Read\ a\ long\ integer.\r\nThis\ method\ skips\ white\ space\ and\ tries\ to\ read\ a\ long\ integer.\ If\ the\r\ntext\ does\ not\ contain\ a\ number\ or\ if\ the\ number\ is\ too\ big,\ the\r\nvalue\ 0\ is\ returned\ and\ the\ subsequent\ call\ of\ done()\ yields\ false.\r\nA\ long\ integer\ is\ a\ sequence\ of\ digits,\ possibly\ preceded\ by\ '-'.\r\n
comment15.params=
comment15.target=float\ readFloat()
comment15.text=\ Read\ a\ float\ value.\r\nThis\ method\ skips\ white\ space\ and\ tries\ to\ read\ a\ float\ value.\ If\ the\r\ntext\ does\ not\ contain\ a\ float\ value\ or\ if\ the\ number\ is\ not\ well-formed,\r\nthe\ value\ 0f\ is\ returned\ and\ the\ subsequent\ call\ of\ done()\ yields\ false.\r\nAn\ float\ value\ is\ as\ specified\ in\ the\ Java\ language\ description.\ It\ may\r\nbe\ preceded\ by\ a\ '+'\ or\ a\ '-'.\r\n
comment16.params=
comment16.target=double\ readDouble()
comment16.text=\ Read\ a\ double\ value.\r\nThis\ method\ skips\ white\ space\ and\ tries\ to\ read\ a\ double\ value.\ If\ the\r\ntext\ does\ not\ contain\ a\ double\ value\ or\ if\ the\ number\ is\ not\ well-formed,\r\nthe\ value\ 0.0\ is\ returned\ and\ the\ subsequent\ call\ of\ done()\ yields\ false.\r\nAn\ double\ value\ is\ as\ specified\ in\ the\ Java\ language\ description.\ It\ may\r\nbe\ preceded\ by\ a\ '+'\ or\ a\ '-'.\r\n
comment17.params=
comment17.target=char\ peek()
comment17.text=\ Peek\ at\ the\ next\ character.\r\nThis\ method\ skips\ white\ space\ and\ returns\ the\ next\ character\ without\ removing\r\nit\ from\ the\ input\ stream.\ It\ can\ be\ used\ to\ find\ out,\ what\ token\ comes\ next\r\nin\ the\ input\ stream.\r\n
comment18.params=fn
comment18.target=void\ open(java.lang.String)
comment18.text=\ Open\ a\ text\ file\ for\ reading\r\nThe\ text\ file\ with\ the\ name\ fn\ is\ opened\ as\ the\ new\ current\ input\r\nfile.\ When\ it\ is\ closed\ again,\ the\ previous\ input\ file\ is\ restored.\r\n
comment19.params=
comment19.target=void\ close()
comment19.text=\ Close\ the\ current\ input\ file.\r\nThe\ current\ input\ file\ is\ closed\ and\ the\ previous\ input\ file\ is\r\nrestored.\ Closing\ the\ keyboard\ input\ has\ no\ effect\ but\ causes\r\ndone()\ to\ yield\ false.\r\n
comment2.params=
comment2.target=java.lang.String\ readDigits()
comment20.params=
comment20.target=boolean\ done()
comment20.text=\ Check\ if\ the\ previous\ operation\ was\ successful.\r\nThis\ method\ returns\ true\ if\ the\ previous\ read\ operation\ was\ able\r\nto\ read\ a\ token\ of\ the\ requested\ structure.\ It\ can\ also\ be\ called\r\nafter\ open()\ and\ close()\ to\ check\ if\ these\ operations\ were\ successful.\r\nIf\ done()\ is\ called\ before\ any\ other\ operation\ it\ yields\ true.\r\n
comment3.params=
comment3.target=java.lang.String\ readFloatDigits()
comment4.params=
comment4.target=char\ read()
comment4.text=\ Read\ a\ raw\ character\ (byte).\r\nIf\ an\ attempt\ is\ made\ to\ read\ beyond\ the\ end\ of\ the\ file,\r\neof\ is\ returned\ and\ done()\ yields\ false.\ Otherwise\ the\ read\ byte\r\nis\ in\ the\ range\ 0..255.\r\n
comment5.params=
comment5.target=int\ available()
comment5.text=\ Current\ available\ raw\ characters.\r\nIn\ case\ of\ an\ error\ 0\ is\ returned\ and\ done()\ yields\ false.\r\n
comment6.params=
comment6.target=char\ readChar()
comment6.text=\ Read\ a\ character,\ but\ skip\ white\ spaces\ (byte).\r\nIf\ an\ attempt\ is\ made\ to\ read\ beyond\ the\ end\ of\ the\ file,\r\neof\ is\ returned\ and\ done()\ yields\ false.\ Otherwise\ the\ read\ byte\r\nis\ in\ the\ range\ 0..255.\r\n
comment7.params=
comment7.target=boolean\ readBoolean()
comment7.text=\ Read\ a\ boolean\ value.\r\nThis\ method\ skips\ white\ space\ and\ tries\ to\ read\ an\ identifier.\ If\ its\ value\r\nis\ "true"\ the\ method\ returns\ true\ otherwise\ false.\ If\ the\ identifier\ is\ neither\r\n"true"\ nor\ "false"\ done()\ yields\ false.\r\n
comment8.params=
comment8.target=java.lang.String\ readIdentifier()
comment8.text=\ Read\ an\ identifier.\r\nThis\ method\ skips\ white\ space\ and\ tries\ to\ read\ an\ identifier\ starting\r\nwith\ a\ letter\ and\ continuing\ with\ letters\ or\ digits.\ If\ a\ token\ of\ this\r\nstructure\ could\ be\ read,\ it\ is\ returned\ otherwise\ the\ empty\ string\ is\r\nreturned\ and\ done()\ yields\ false.\r\n
comment9.params=
comment9.target=java.lang.String\ readWord()
comment9.text=\ Read\ a\ word.\r\nThis\ method\ skips\ white\ space\ and\ tries\ to\ read\ a\ word\ consisting\ of\r\nall\ characters\ up\ to\ the\ next\ white\ space\ or\ to\ the\ end\ of\ the\ file.\r\nIf\ a\ token\ of\ this\ structure\ could\ be\ read,\ it\ is\ returned\ otherwise\r\nan\ empty\ string\ is\ returned\ and\ done()\ yields\ false.\r\n
numComments=21
